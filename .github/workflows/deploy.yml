name: Deploy Graphql Server

on:
  deployment:
  workflow_dispatch:

env:
  PROJECT: a4bird-memories
  AWS_ACCOUNT_NUMBER: ${{ secrets.AWS_ACCOUNT_NUMBER }}
  AWS_PRIMARY_REGION: ap-southeast-2
  AWS_ROLE_TO_ASSUME: arn:aws:iam::${{ secrets.AWS_ACCOUNT_NUMBER }}:role/admin
  AWS_ECR_REPO_NAME: memories-server
  ENV_SUFFIX: 'dev'
  PREV_ENV: ''

jobs:
  setup:
    name: Setup Variables
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.branch-slug.outputs.branch }}
      slug: ${{ steps.branch-slug.outputs.slug }}
    steps:
      - name: Create Slug
        id: branch-slug
        run: |
          branch_ref=${GITHUB_REF#refs/heads/}
          branch="${GITHUB_HEAD_REF:-$branch_ref}"
          slug="${branch//\//-}"
          echo ::set-output name=branch::${branch}
          echo ::set-output name=slug::${slug,,}
      - name: Display branch slug output
        id: branch-slug-output
        run: |
          echo "branch is ${branch}"
          echo "slug is ${slug}"
        env:
          branch: ${{steps.branch-slug.outputs.branch}}
          slug: ${{steps.branch-slug.outputs.slug}}

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [setup]
    steps:
      # - name: Set environment variables for staging
      #   if: github.event.deployment.environment == 'staging'
      #   run: |
      #     echo "::set-env name=PREV_ENV::development"
      #     echo "::set-env name=ENV_SUFFIX::stg"

      # - name: Set environment variables for Production
      #   if: github.event.deployment.environment == 'production'
      #   run: |
      #     echo "::set-env name=PREV_ENV::staging"
      #     echo "::set-env name=ENV_SUFFIX::prod"

      # - name: Get deployments from the preceding environment
      #   if: env.PREV_ENV != ''
      #   id: check_previous_stage
      #   uses: octokit/request-action@v2.x
      #   with:
      #     route: GET /repos/:repository/deployments?sha=:sha&environment=:environment
      #     repository: ${{ github.repository }}
      #     sha: ${{ github.sha }}
      #     environment: ${{ env.PREV_ENV }}
      #     mediaType: |
      #       previews:
      #         - ant-man
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Check previous deployments
      #   if: env.PREV_ENV != '' && steps.check_previous_stage.outputs.data == '[]'
      #   run: |
      #     echo "::error ::Must deploy to ${{ env.PREV_ENV }} environment before ${{ github.event.deployment.environment}}"
      #     exit 1

      - name: Echo Deployment payload
        run: |
          echo "::info ::Deployment payload: ${{ toJSON(github.event.deployment) }}"

      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '${{ env.NODE_VERSION }}'

      - name: Install Dependencies
        run: npm run cdk-install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        id: login-aws
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_PRIMARY_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 1200

      - name: Deploy Vpce to ap-southeast-2
        id: cdk-vpce-deploy
        working-directory: .aws/cdk/memories-server
        env:
          ENV_SUFFIX: ${{ env.ENV_SUFFIX }}
          SLUG: ${{ needs.setup.outputs.slug }}
          AWS_TAG_REPOSITORY: ${{ github.repository }}
          AWS_CDK_DEPLOY_ACCOUNT: ${{ steps.login-aws.outputs.aws-account-id }}
          AWS_CDK_DEPLOY_REGION: ap-southeast-2
          AWS_CDK_VPCE_STACK_ID: memory-server-vpce-${{ env.ENV_SUFFIX }}-${{ needs.setup.outputs.slug }}
          AWS_ECR_REPO_ARN: arn:aws:ecr:${{ env.AWS_PRIMARY_REGION }}:${{ secrets.AWS_ACCOUNT_NUMBER }}:repository/${{ env.AWS_ECR_REPO_NAME }}
        run: |
          npm run cdk deploy memory-server-vpce-${{ env.ENV_SUFFIX }}-${{ needs.setup.outputs.slug }} -- --verbose --require-approval never

      - name: Deploy Server to ap-southeast-2
        id: cdk-server-deploy
        working-directory: .aws/cdk/memories-server
        env:
          NODE_ENV: ${{ github.event.deployment.environment }}
          ENV_SUFFIX: ${{ env.ENV_SUFFIX }}
          SLUG: ${{ needs.setup.outputs.slug }}
          AWS_TAG_REPOSITORY: ${{ github.repository }}
          AWS_CDK_DEPLOY_ACCOUNT: ${{ steps.login-aws.outputs.aws-account-id }}
          AWS_CDK_DEPLOY_REGION: ap-southeast-2
          AWS_CDK_STACK_ID: memory-server-${{ env.ENV_SUFFIX }}-${{ needs.setup.outputs.slug }}
          AWS_CDK_VPCE_STACK_ID: memory-server-vpce-${{ env.ENV_SUFFIX }}-${{ needs.setup.outputs.slug }}
          AWS_CERTIFICATE_ARN: arn:aws:acm:${{ env.AWS_PRIMARY_REGION }}:${{ steps.login-aws.outputs.aws-account-id }}:certificate/${{ secrets.AWS_CERTIFICATE_ID }}
          AWS_ECR_REPO_ARN: arn:aws:ecr:${{ env.AWS_PRIMARY_REGION }}:${{ secrets.AWS_ACCOUNT_NUMBER }}:repository/${{ env.AWS_ECR_REPO_NAME }}
          AWS_FARGATE_SERVICE_NAME: ${{ needs.setup.outputs.slug }}
          AWS_FARGATE_DESIRED_COUNT: 1
          AWS_FARGATE_MIN_CAPACITY: 1
          AWS_FARGATE_MAX_CAPACITY: 4
          AWS_ROUTE53_DOMAIN: a4brd.tk
          AWS_ROUTE53_SUBDOMAIN: memories-server-${{ needs.setup.outputs.slug }}
          DOCKER_IMAGE_TAG: ${{ github.event.deployment.payload.docker_tag }}
          CONTAINER_AWS_DYNAMO_DB_TABLE: a4bird-memories-table-${{ env.ENV_SUFFIX }}-main
          CONTAINER_JWT_SECRET: ${{ secrets.JWT_SECRET }}
          CONTAINER_CORS_ORIGIN: http://localhost:3000
          CONTAINER_APOLLO_INTROSPECTION_ENABLED: ${{ env.ENV_SUFFIX != 'prod' }}
          CONTAINER_APOLLO_PLAYGROUND_ENABLED: ${{ env.ENV_SUFFIX != 'prod' }}
          CONTAINER_APOLLO_REPORT_SCHEMA: ${{ env.ENV_SUFFIX != 'prod' }}
          CONTAINER_APOLLO_GRAPH_VARIANT: ${{ env.ENV_SUFFIX }}-${{ needs.setup.outputs.slug }}
          CONTAINER_APOLLO_SERVER_USER_VERSION: ${{ github.event.deployment.payload.docker_tag }}
        run: |
          npm run cdk deploy memory-server-${{ env.ENV_SUFFIX }}-${{ needs.setup.outputs.slug }} -- --verbose --require-approval never
          echo ::set-output name=url::https://${AWS_ROUTE53_SUBDOMAIN}.${AWS_ROUTE53_DOMAIN}

      # - name: teardown Vpce stack in ap-southeast-2
      #   id: cdk-vpce-teardown
      #   working-directory: .aws/cdk/memories-server
      #   env:
      #     ENV_SUFFIX: ${{ env.ENV_SUFFIX }}
      #     SLUG: ${{ needs.setup.outputs.slug }}
      #     AWS_TAG_REPOSITORY: ${{ github.repository }}
      #     AWS_CDK_DEPLOY_ACCOUNT: ${{ steps.login-aws.outputs.aws-account-id }}
      #     AWS_CDK_DEPLOY_REGION: ap-southeast-2
      #     AWS_CDK_VPCE_STACK_ID: memory-server-vpce-${{ env.ENV_SUFFIX }}-${{ needs.setup.outputs.slug }}
      #     AWS_ECR_REPO_ARN: arn:aws:ecr:${{ env.AWS_PRIMARY_REGION }}:${{ secrets.AWS_ACCOUNT_NUMBER }}:repository/${{ env.AWS_ECR_REPO_NAME }}
      #   run: |
      #     npm run cdk destroy memory-server-vpce-${{ env.ENV_SUFFIX }}-${{ needs.setup.outputs.slug }} -- --verbose --force
